Question 4

Which of the data structures is most suitable? Justify your answer.
You must use time complexities as a basis for your justification.

Use AVL tree, its faster.

Ordered Linked List:
    push its O(n), since we need to find the tail.
    pop its O(1), since just remove the head.
    PrintInOrder its O(n), since we need to meet each item.

Ordered Array:
    push its O(1), just go to the last index.
    pop its O(n), we need to rearrange all items after pop.
    PrintInOrder its O(n), since we need to meet each item.

AVL Tree:
    push its O(logn), since its height balance, we need to find leaf.
    pop its O(logn), since we need to find highest priority through the height.
    PrintInOrder its O(n), since we need to meet each item.

Hashtable:
    push its O(1), since we just find the key by using hashing.
    pop also its O(n), since we need to rearrange all items.
    PrintInOrder its O(n), since we need to meet all items.

Heap:
    push its O(logn), since we need to fixup.
    pop also its O(logn), since we need to fixdown.
    PrintInOrder its O(nlogn), since we need to pop each item and print.

    conclusion:
        for the time complexity I prefer use AVL tree, its faster.