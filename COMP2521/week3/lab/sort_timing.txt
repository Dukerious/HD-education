Input	Initial	Number	AvgTime		AvgTime
Size	Order	of Runs	for sortIntList	for sort
10000	random	5	0.20		          0.00
10000	sorted	5	0.00		          0.00
10000	reverse	5	0.00		          0.00
20000	random	5	1.39		          0.004
20000	sorted	5	0.002		     0.00
20000	reverse	5	0.002		     0.00
50000	random	5    12    		     0.02
50000	sorted	5	0.014		     0.012
50000	reverse	5	0.014		     0.01
...
explain:
     we can find that when the input size increasing the avgtime also increasing;
     of course, when the data going to heavy, the time make scense to increasing.
     In addition, we also can find that, for the same input size, the pattern of 
     sorted and reverse has the similar execute time, and the pattern of random always
     much more longer than others. 
     I think the reason is that the time complexity about the sortIntList. When we look
     into the function 'IntListInsertInOrder', we can know that for the sorted pattern, everytime we 
     just to change the head of the list and do not need to find the insert position, and for the 
     reverse pattern, we just change the tail for everytime.
     However, when we under the pattern of random, we have to find the insert position, to traverse all
     list, so the time complexity must be higher than others.
